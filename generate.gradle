import groovy.json.JsonSlurper
import groovy.sql.Sql
import groovy.xml.StreamingMarkupBuilder

import java.text.SimpleDateFormat

//////////////////////////////////////////////
configurations {
    sqllite
}

repositories {
    mavenCentral()
}

dependencies {
    sqllite 'org.xerial:sqlite-jdbc:3.8.9.1'
}

URLClassLoader loader = GroovyObject.class.classLoader
configurations.sqllite.each { File file ->
    loader.addURL(file.toURL())
}

//////////////////////////////////////////////

  ext.generate = { String prj, String dir  ->
    doGenerate(prj, dir)  
  }

  def doGenerate(def prj, def dir)
  {
      println "Loading $prj"  
      def files = fileTree(dir).filter {it.getName()=='_Application.java'}.files
      String path = files.getAt(0).getParentFile().getAbsolutePath().replace("\\", "/")

      String sourcePackage = path.substring(path.indexOf('/java/')+ '/java/'.length()).replace("/", ".")
      println sourcePackage
                                                        
      def sourceDir = new File(path.replace('/main/', '/'+ prj +'/'))
      sourceDir.mkdirs()
    
      Properties p = new Properties ()
      def root_dir =  'app/src/'+prj
      p.load ( 
          new BufferedReader (
              new InputStreamReader (
                  new FileInputStream ( rootProject.file (root_dir+'/project.properties' ) ),
                  "UTF-8"
              )
          )
      );
      println "id = $p.id"
      
      def assets_dir = root_dir +"/assets"
    
      def assets_folder = rootProject.file(assets_dir);

      // delete fileTree(dir: assets_dir , include: "**/*.dat")

      assets_folder.deleteDir()

      if( !assets_folder.exists() ) 
      {
         assets_folder.mkdirs()
      }
           

     def api_link = "http://api.moygorod.mobi"
     //def api_link = "http://163.172.112.21"

     if ("30" == p.id) //Testenburg
        //api_link = "http://88.212.234.122"
        api_link = "http://test.moygorod.mobi"


     

      writeAppData(p, api_link, sourceDir, sourcePackage)
      writeAppDataResources(root_dir, p) 
      
      //////////////////////////////////////////////////////////////////////////////
      def dbfolder = new File(assets_folder, 'databases')
      dbfolder.mkdir()  
      java.nio.file.Files.copy (
            new File(rootProject.file(".").toString(), "mg.dat").toPath(), 
            new File(dbfolder, "mg.dat").toPath(), 
            java.nio.file.StandardCopyOption.REPLACE_EXISTING
        );

      
      Sql sql = Sql.newInstance('jdbc:sqlite:' + dbfolder + '/mg.dat', "org.sqlite.JDBC")
      //sql.cacheStatements = true
      
      //////////////////////////////////////////////////////////////////////////////
      ArrayList<File> fileList      

      //donwloadTable("news"        , api_link  ,null        , "sort=-date&per-page=90"               , p, -1, assets_dir, prj)
      //donwloadTable("events"      , api_link  ,null        , "actual=true&sort=date"                , p, 50,  assets_dir, prj)     
      

      

      fileList = donwloadTable("buttons"     , api_link  ,null        , "per-page=-1&sort=pos"                           , p, -1, assets_dir, prj)
      insertButtons(sql, fileList)


      fileList = donwloadTable("categories"  , api_link  ,null        , "recursive=true"                     , p, -1, assets_dir, prj)
      insertCategories(sql, fileList)


      fileList = donwloadTable("actions"      , api_link, "actions"    , "per-page=-1"             , p, -1,  assets_dir, prj) // &actual=true      
      insertActions(sql, fileList)

      fileList = donwloadTable("category-organization", api_link      ,"category_organization"                 , "sort=updated_at", p, 500, assets_dir, prj) 
      insertCategoryOrganizations(sql, fileList)

      fileList = donwloadTable("organizations" ,api_link, null,  "sort=updated_at"                   , p, 400,  assets_dir, prj)  
      insertOrganizations(sql, fileList)  


      fileList = donwloadTable("options"       ,api_link, null,  "per-page=-1"                       , p, -1, assets_dir, prj)
      insertOptions(sql, fileList)  

      fileList = donwloadTable("about"         ,api_link, null,  null                                , p, -1, assets_dir, prj)
      insertAbout(sql, fileList)  

      sql.close()       
  }


  def writeAppData(def p, def api_link, def root_dir, def packageName)
  {
      def className='AppData'
      def comment = getAutoGeneratedComment("/*", "*/")
      def srcFile = new File(root_dir, className + ".java")
      srcFile.parentFile.mkdirs()
      srcFile.write("""$comment
package $packageName;


public class $className
{
    public final static String BASE_URL = "$api_link";
    public static String getAppId()     { return "$p.id"; }
}

""")
   }

   def getAutoGeneratedComment(String prefix, String postfix)
   {
      String separator = System.getProperty("line.separator") 
      return "$prefix$separator  This file was auto-generated.$separator  Changes to this file may cause incorrect behavior$separator  and will be lost if the file is regenerated.$separator$postfix"
   } 


 def donwloadTable(def entity, def api_link, def resname, def params, def props, def per_page, def assets_dir, def prj)
 {
    int page = 1    
    def file
    def paging = per_page > 0
    
    //println "paging = $paging"        

    ArrayList<File> list = new ArrayList<File>()


    def fname
    if (null != resname)
        fname  = resname
    else
       fname = entity
    //entity.replace('-', '-')
    
    def file_prefix = assets_dir + '/' + fname
    def id = props.id

    while (true)
    {
        file = rootProject.file(file_prefix + '_' + page + ".dat");
        def url = api_link + "/api/v1/" + entity

        if (null != params && 0 != params.length())
        {
            url = url + '?' + params
            if (true == paging)   
                url = url + '&'

        }
        else
        {
            if (true == paging)   
                url = url + '?'
        }
         
        if (true == paging)   
            url = url + "page=" + page + "&per-page=" + per_page
        
       //println "$url"        
       
        def pages_count = downloadDataFile(url, props.id, file, prj)
        if (null != file)
        {
            list << file
        }
        if (false == paging)   
           break
        if (page >= pages_count)
           break
        page++
    }
    if (file.exists() && file.length() < 4)
    {
       file.delete()
       list.remove(file)
    }    

    //println list                       
    return list
 }



 def downloadDataFile(def link, def id, def output_path, def prj) 
 {
    println prj + " get " + output_path.getName()
    URL url = new URL(link)
    URLConnection urlConnection = url.openConnection()


    //curl -v -H "Accept: application/json" -H "charset=UTF-8" -H "X-Moygorod-Application-Id:7" "http://api.moygorod.mobi/api/v1/buttons" > but.dat

    //urlConnection.setRequestProperty("Accept",    "application/json")
    //urlConnection.setRequestProperty("charset", "UTF-8"); 
    urlConnection.setRequestProperty("X-Moygorod-Application-Id", "" + id)
    urlConnection.setRequestProperty("Accept-Charset", "UTF-8")


    //println urlConnection.toString()
    //println urlConnection.getHeaderField("X-Moygorod-Application-Id")

     urlConnection.inputStream.withStream {
        //rootProject.file(output_path).bytes = it.bytes
        output_path.bytes = it.bytes        
    }
    //println urlConnection.getHeaderField("Content-Length")
           
                               
    // println 'X-Pagination-Total-Count  = ' +  urlConnection.getHeaderField('X-Pagination-Total-Count')
    // println 'X-Pagination-Page-Count   = ' +  urlConnection.getHeaderField('X-Pagination-Page-Count')
    // println 'X-Pagination-Current-Page = ' +  urlConnection.getHeaderField('X-Pagination-Current-Page')
    // println 'X-Pagination-Per-Page     = ' +  urlConnection.getHeaderField('X-Pagination-Per-Page')             

     
    def count =  urlConnection.getHeaderField("X-Pagination-Page-Count")
    if (null == count)
       return 0
    return count as int
 }

 
/*
 def writeAppDataResources(def root_dir, def p) 
 {

    File parent = new File(root_dir + '/res/values') //-' + app.Language)    
    if( !parent.exists() ) 
        parent.mkdirs()
  
 
    File stringsFile = new File(parent, 'app_data.xml')    
                               
    def sw = new StringWriter()
    def xml  = new groovy.xml.MarkupBuilder(sw)
    //xml.encoding = "UTF-8"
    xml.mkp.xmlDeclaration(version: "1.0", encoding: "utf-8")

    def comment = getAutoGeneratedComment("<!--", "-->")
    sw.append(comment)
    
    xml.resources()
    {
        string(name: "app_name"     , p.name)
        string(name: "city_genitive", p.genitive)
    }

    stringsFile.write(sw.toString())
 }
*/

  def writeAppDataResources(def root_dir, def p) 
  {
    File parent = new File(root_dir + "/res/values") //-' + app.Language)    
    if( !parent.exists() ) 
        parent.mkdirs()
    
    def comment = getAutoGeneratedComment("", "")
    String separator = System.getProperty("line.separator") 
    File file = new File(parent, "app_name.xml")
    new OutputStreamWriter(new FileOutputStream(file),"utf-8") << new StreamingMarkupBuilder().bind {
       mkp.xmlDeclaration(version: "1.0", encoding: "utf-8")
       mkp.comment("$comment")
       mkp.yield separator
       resources {
           mkp.yield separator+"  " 
           string(name: "app_name"        , p.name)
           mkp.yield separator+"  " 
           string(name: "city_genitive"   , p.genitive)
           mkp.yield separator
       }
     }
  }



class Globals {
    static SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.ENGLISH);
}


Long getDate(String date)
{
    if (null != date && 0 != date.length())
    {
        Date d =  Globals.formatter.parse(date)
        if (null != d)
            return d.getTime();
    }
    return null
}

def getJsonData(File file)
{
    //def reader = new BufferedReader(new FileReader(file))

     def reader = new BufferedReader (
              new InputStreamReader (
                  new FileInputStream ( file ),
                  "UTF-8"
              )
          )


    def jsonSlurper = new JsonSlurper()
    def parsedData = jsonSlurper.parse(reader)
    return parsedData 
}

def getAsList(def list)
{
    if (null == list)
        return null;

    StringBuilder sb = null;
    list.each { s ->
        if (null != s && 0 != s.length())
        {
            if (null == sb)
                sb = new StringBuilder(32);
            if (sb.length() > 0)
                sb.append('|');
            sb.append(s);
        }
    }
    if (null != sb && 0 != sb.length())
        return sb.toString();
    return null;

}

                
def insertButtons(def sql, def list)
{
    if (null != list)
    {
        list.each { File file ->
            def parsedData = getJsonData(file)
            //println parsedData
            if (null != parsedData)
                insertButtonsIntoDb(sql, parsedData)
            file.delete()
        }
           
    }
}


def insertButtonsIntoDb(def sql, def parsedData)
{
    sql.withTransaction 
    {
        sql.withBatch('INSERT INTO BUTTONS(ID, TITLE, ICON, ROW_ID, _TABLE, PHONE, DELETED, PUBLISHED, LINK, POS, UPDATED_AT, IMAGE) values(?,?,?,?,?,?,?,?,?,?,?,?)') { ps ->
              parsedData.each { o ->
                if (1 == o.published && 0 == o.is_deleted)
                  ps.addBatch(o.button_id, o.title, o.icon, o.row_id, o.table, o.phone, o.is_deleted, o.published, o.link, o.pos, o.updated_at, o.image)
            }
        }    
    }                                                                            
//{"button_id":756,"title":"title","icon":"","link":"http://www.tutu.ru/station.php?nnst=80710","row_id":0,"table":"","updated_at":1465907671,"published":1,"phone":"","pos":1,"image":"http://52.28.179.65/files/buttons/9c71539a.png","application_id":7,"is_deleted":0}
}


def insertCategories(def sql, def list)
{
    if (null != list)
    {
        list.each { File file ->
            def parsedData = getJsonData(file)
            //println parsedData
            if (null != parsedData)
                insertCategoriesIntoDb(sql, parsedData)
            file.delete()
        }
           
    }
}

def insertCategoriesIntoDb(def sql, def parsedData)
{
    sql.withTransaction 
    {
        sql.withBatch('INSERT INTO CATEGORIES(ID, PARENT_ID, NAME, PIC, POS, DELETED, NAME_LOW, PUBLISHED, UPDATED_AT, IMAGE) values(?,?,?,?,?,?,?,?,?,?)') { ps ->
              parsedData.each { o ->                    
                  String name= o.name
                  if (1 == o.published && 0 == o.is_deleted)
                     ps.addBatch(o.category_id, o.parent_id, name, o.pic, o.pos, o.is_deleted, name.toLowerCase(), o.published, o.updated_at, o.image)
            }
        }    
    }                                                                            
    //{"category_id":426,"parent_id":234,"name":"�࠭ᠡ���","pic":"","updated_at":1465999068,"published":1,"pos":0,"image":"http://52.28.179.65/files/categories/3b0e9dac.jpg","is_deleted":0}
}



def insertActions(def sql, def list)
{
    if (null != list)
    {
        list.each { File file ->
            def parsedData = getJsonData(file)
            //println parsedData
            if (null != parsedData)
                insertActionsIntoDb(sql, parsedData)
            file.delete()
        }
           
    }
}


def insertActionsIntoDb(def sql, def parsedData)
{
    sql.withTransaction 
    {
        sql.withBatch('INSERT INTO ACTIONS(ID,TITLE,ADDRESS,AVATAR,DATE,DATE_END,LIFE_TIME_TYPE,PRICE,PHONES,PHOTOS,INFO,SITE,SITE_TITLE,ORGANIZATION_ID,HIGHLIGHT,PROMOTED,UPDATED_AT,DELETED,PUBLISHED,VIDEO,IS_VIDEO_HIDDEN) values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)') { ps ->
              parsedData.each { o ->                    
                  if (1 == o.published && 0 == o.is_deleted)
                  {                     

                     ps.addBatch(o.action_id,o.title,o.address,o.avatar,getDate(o.date_since),getDate(o.date_before),o.type,o.price,o.phones,getAsList(o.fotos),o.info,o.site,o.site_title,o.organization_id,o.highlight,o.promoted,o.updated_at,o.is_deleted,o.published,null,0)
                  }
            }
        }    
    }                                                                            
    //{"action_id":1689,"type":2,"title":"title","address":"address","avatar":"http://52.28.179.65/files/actions/5cc3cefe4.jpg","fotos":["http://52.28.179.65/files/actions/5cc3cefe.jpg"],"date_since":"2016-06-17 14:50:14","date_before":"2016-08-31 23:55:14","price":"������ � �������� �����","phones":"89268762222","info":"������� �� �����, ���� ������� ����� ������ � ��������� ������ �� ������� � �������� ���������. ","site":"http://orthodont-premier.ru/","site_title":"","organization_id":76560,"updated_at":1466081317,"published":1,"is_deleted":0,"highlight":0,"promoted":0,"application_id":7}
}


def insertCategoryOrganizations(def sql, def list)
{
    if (null != list)
    {
        list.each { File file ->
            def parsedData = getJsonData(file)
            //println parsedData
            if (null != parsedData)
                insertCategoryOrganizationsIntoDb(sql, parsedData)
            file.delete()
        }
           
    }
}


def insertCategoryOrganizationsIntoDb(def sql, def parsedData)
{
    sql.withTransaction 
    {
        sql.withBatch('INSERT INTO ORGANIZATION_CATEGORY(ID, CATEGORY_ID, ORGANIZATION_ID, POS, UPDATED_AT, DELETED) values(?,?,?,?,?,?)') { ps ->
              parsedData.each { o ->                    
                  if (0 == o.is_deleted)
                  {                     

                     ps.addBatch(o.id,o.category_id,o.organization_id,o.pos,o.updated_at, o.is_deleted)
                  }
            }
        }    
    }                                                                            
    //{"id":205719,"category_id":19,"organization_id":109413,"pos":205719,"updated_at":1461821811,"is_deleted":1}
}


def insertOrganizations(def sql, def list)
{
    if (null != list)
    {
        list.each { File file ->
            def parsedData = getJsonData(file)
            //println parsedData
            if (null != parsedData)
                insertOrganizationIntoDb(sql, parsedData)
            file.delete()
        }
           
    }
}


def insertOrganizationIntoDb(def sql, def parsedData)
{
    sql.withTransaction 
    {
        sql.withBatch('INSERT INTO ORGANIZATIONS(id,title, site, address, latitude, longitude, type, open_time, info, work_monday, work_tuesday, work_wednesday, work_thursday, work_friday, work_saturday, work_sunday, work_always, highlight, promoted, phones_count, pos, has_coordinates, updated_at, deleted, title_low,PUBLISHED,image,VIDEO,IS_VIDEO_HIDDEN) values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)') { ps ->
              parsedData.each { o ->                    
                  if (1 == o.published && 0 == o.is_deleted)
                  {                     
                      String s = o.latitude
                      Integer  latitude = null;
                      int hasCoordinates = 0
                      if (null != s && 0 != s.length())
                      {
                          double d;
                          try
                          {
                              d = Double.parseDouble(s);
                              hasCoordinates = 1
                          }
                          catch (NumberFormatException e)
                          {
                              hasCoordinates = 0;
                          }

                          if (1 == hasCoordinates)
                            latitude = (int) (d * 1E6);
                      }


                      s = o.longitude

                      Integer  longitude = null;
                      if (1 == hasCoordinates)
                      if (null != s && 0 != s.length() && (1 == hasCoordinates))
                      {
                          double d;
                          try
                          {
                              d = Double.parseDouble(s);                              
                          }
                          catch (NumberFormatException e)
                          {
                              hasCoordinates = 0;
                              latitude = null;
                          }

                          if (1 == hasCoordinates)
                            longitude = (int) (d * 1E6);
                      }

                     def phones  = o.phones
                     int phonesCount = (null != phones) ? phones.size() : 0

                      
                     ps.addBatch(o.organization_id,o.title,o.site,o.address,latitude,longitude, o.type, o.open_time, o.info, o.work_monday, o.work_tuesday, o.work_wednesday, o.work_thursday, o.work_friday, o.work_saturday, o.work_sunday, o.work_always, o.highlight, o.promoted, phonesCount, o.pos, hasCoordinates,o.updated_at, o.is_deleted, o.title.toLowerCase(),o.published,o.image, null,0)
                  }
            }                                            
        }    

        sql.withBatch('INSERT OR REPLACE INTO ORGANIZATION_PHONE(ORGANIZATION_ID, PHONE, DESCRIPTION, UPDATED_AT) values(?,?,?,?)') { ps ->
              parsedData.each { o ->                    
                  if (1 == o.published && 0 == o.is_deleted)
                  {
                     def phones  = o.phones
                     if (null != phones && !phones.isEmpty())
                     {
                        phones.each { p -> 
                            def phone = p.phone
                            if (null != phone && 0 != phone.length())
                                ps.addBatch(o.organization_id, phone, p.description)
                        }
                     }
                   }
            }
        }    

    }                                                                            
    //{"organization_id":74240,"title":"������� \"��⭨�-�롮���\"","site":"http://www.zelohota.3dn.ru","address":"�������ࠤ, 1-� ������� �஥��, ��� 7, ��஥��� 1","latitude":"56.010755","longitude":"37.194493","type":"org","open_time":"��䨪 ࠡ���: �������쭨�-��⭨� 10:00-19:00, �㡡�� 10:00-16:00","info":"��⭨�� ��㦨�, ���஭�, �ࠢ����᪮� � ��������᪮� ��㦨�, ⮢��� ��� ����, �론���, ��ਧ��.","updated_at":1465157807,"published":1,"work_monday":"10:00 - 19:00","work_tuesday":"10:00 - 19:00","work_wednesday":"10:00 - 19:00","work_thursday":"10:00 - 19:00","work_friday":"10:00 - 19:00","work_saturday":"10:00 - 16:00","work_sunday":"","work_always":0,"highlight":0,"promoted":0,"pos":5030,"is_deleted":0,"image":"","categories":[135],"phones":[{"phone":"+7(499)762-34-30","description":""}
}


                
def insertOptions(def sql, def list)
{
    if (null != list)
    {
        list.each { File file ->
            def parsedData = getJsonData(file)
            //println parsedData
            if (null != parsedData)
                insertOptionsIntoDb(sql, parsedData)
            file.delete()
        }
           
    }
}


def insertOptionsIntoDb(def sql, def parsedData)
{
    sql.withTransaction 
    {
        sql.withBatch('INSERT INTO OPTIONS(ID, KEY, TYPE, VALUE, DELETED, UPDATED_AT) values(?,?,?,?,?,?)') { ps ->
              parsedData.each { o ->
                if (0 == o.is_deleted)
                  ps.addBatch(o.option_id, o.key, o.type, o.value, o.is_deleted, o.updated_at)
            }
        }    
    }    
    //{"option_id":77,"key":"ask_pushes_at_first","type":"string","updated_at":1464294215,"is_deleted":0,"value":"true"}                                                                        

}


def insertAbout(def sql, def list)
{
    if (null != list)
    {
        list.each { File file ->
            def parsedData = getJsonData(file)
            //println parsedData
            if (null != parsedData)
                insertAboutIntoDb(sql, parsedData)
            file.delete()
        }
           
    }
}


def insertAboutIntoDb(def sql, def parsedData)
{
    sql.withTransaction 
    {
        /*
        sql.withBatch('INSERT OR REPLACE INTO ABOUT(ID, PHONE, ABOUT_PROJECT) values(?,?,?)') 
        { ps -> 
              ps.addBatch(1, parsedData.about_project, parsedData.phone)
        }


        sql.withBatch('INSERT OR REPLACE INTO OWNERS(PIC_LINK, NAME, DESC) values(?,?,?)') 
        { ps -> 
                def owners  = parsedData.owners
                if (null != owners && !owners.isEmpty())
                {

                   phones.each 
                     { p -> 
                          def name = o.name;
                          if (null != name && 0 != name.length())      
                              ps.addBatch(p.pic_link,name, p.desc)
                      }
                }
        } 
        */
        sql.execute 'INSERT INTO ABOUT(ID, PHONE, ABOUT_PROJECT) values(?,?,?)', 1, parsedData.about_project, parsedData.phone


        def owners  = parsedData.owners
        if (null != owners && !owners.isEmpty())
        {

           sql.withBatch('INSERT INTO OWNERS(PIC_LINK, NAME, DESC) values(?,?,?)') { ps ->
                 owners.each { o ->
                          def name = o.name;
                          if (null == name)
                            name=""      
                           ps.addBatch(o.pic_link,name, o.desc)
               }
           }    

        }

    }    

}






//////////////////////////////////////////////
//https://github.com/jgilfelt/android-sqlite-asset-helper
